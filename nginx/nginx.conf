#&& runing user
#
#user  nobody;


#&& start process,which is equal to number of CPU normally
#
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

#&& working  mode and max connection
events {
    #&& epoll is one of method in IO Multiplexing,just fix to linux kernel
    #&& version  larger than 2.6,using epoll can enhance nginx performan
    #
    #use epoll;


    #&&max concurrent link of single background worker process
    #
    worker_connections  1024;

    #multi_accept on;
}

#&& set http server ,realize load balancing  with using reverse proxy
http {
    #&& set mime type
    #
    include       mime.types;
    
    #&& 
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;


    #&& specify nginx  calling senfile function to output file,
    #&& to normal application,the value must be on.
    #&& if puporse is  to download or other heavy IO lead application,
    #&& the value can be off ,doing that can balance disk and network IO 
    #&& speed,recude uptime of system
    #
    sendfile        on;
    #tcp_nopush     on;

    #&& max connection timeout
    #
    #keepalive_timeout  0;
    keepalive_timeout  65;
    
    #&& enable gzip compress
    #
    #gzip  on;

	
    #&& NOTE! following content which divided by '---' is added by user self
    #&& ----------------------user defined--------------------------------
    #&& set request buffer
    #client_header_buffer_size 1k;
    #large_client_header_buffers 44k;
    #
    #&& balancing load server list
    #
    #upstream mysvr{
    #&& weight represents the probability of server distributed to process 
    #&& request ,the value is higher ,higher probability
    #
    #
    #server 192.168.0.101:80 weight=5;
    #server 192.186.0.102:80 weight=1;
    #server 192.168.0.103:80 weight=6;
    #
    #}
    #&& --------------------end-----------------------------------------
    server {
	#&& server listening port
	#
        listen       80;
	#&& domain name 
	#
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
	
	#&& default request
	#
        location / {
	    #&& website root directory
	    #
            root   html;
	    #&& index page file name
	    #
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #&& error note page
        #
        error_page   500 502 503 504  /50x.html;
	#
	#&& error page path diretory ,you can write youself error_page 
	#&& which starts with 50x.html 
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
